1. List the commands for adding, updating, and deleting data.

To add data we use the INSERT INTO command
To update the data we use the UPDATE command
To delete data we use the DELETE command

2. Explain the structure for each type of command.

INSERT INTO <name of table> VALUES (<Data for each column>)
UPDATE <name of table> SET <item to change> WHERE <unique way of finding data>
DELETE FROM <name of table> WHERE <unique way of finding data>

3. What are some of the data types that can be used in tables? Give a real-world example of each type.

Date & Time - This can be used for a blog where it captures the date the blog entry was entered. 
Monetary Types - This can be used when doing an inventory of items and their prices. 
Enumeration - When you want the user to have a limited amount of choices, for example if a restaurant only offered two sizes for coffee medium and large. 

4. Decide how to create a new table to hold a list of people invited to a wedding dinner. The table needs to have first and last names, whether they sent 
in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

Which data type would you use to store each of the following pieces of information?

   First and last name. - Text
   Whether they sent in their RSVP. - Boolean
   Number of guests. - Integer
   Number of meals. - real
 
Write a command that creates the table to track the wedding dinner.

   CREATE TABLE dinners(
      firstName text, 
      lastName text, 
      rsvp bool, 
      guests integer, 
      meals real
   );

Write a command that adds a column to track whether the guest sent a thank you card.

   ALTER TABLE dinners ADD COLUMN thankYou bool;

You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.

   ALTER TABLE dinners DROP COLUMN meals;

The guests will need a place to sit at the reception, so write a command that adds a column for table number.

   ALTER TABLE dinners ADD COLUMN tableNum integer;

The wedding is over and we do not need to keep this information, so write a command that deletes the table numbers from the database.

   DROP TABLE dinners;

5. Write a command to create a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.

   CREATE TABLE books(
      ISBN integer, 
      title text, 
      author text, 
      genre text, 
      published date, 
      copies integer, 
      available integer
   );

Find three books and add their information to the table.

   INSERT INTO books (ISBN, title, author, genre, published, copies, available) VALUES
   (0439708184, "Harry Potter and the Sorcerers Stone", "J.K. Rowling", "Fiction", 09/08/1999, 1009, 567), 
   (0439136369, "Harry Potter and the Prisoner of Azkaban", "J.K. Rowling", "Fiction", 09/01/2001, 1287, 832), 
   (0439139600, "Harry Potter and the Goblet of Fire", "J.K. Rowling", "Fiction", 09/01/2002, 987, 234);

Someone has just checked out one of the books. Change the number of available copies to 1 fewer.

   UPDATE books SET available=233 where ISBN=0439139600;

Now one of the books has been added to the banned books list. Remove it from the table.

   DELETE FROM books WHERE ISBN=0439708184;

6. Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, 
orbiting body, if it is currently operating, and its approximate miles from Earth. In addition to the table creation, provide commands that perform the following operations:

   CREATE TABLE spacecrafts(
      id integer, 
      name text, 
      launched date,
      country text, 
      description text, 
      orbiting text, 
      operating bool, 
      miles double precision
   );

Add three non-Earth-orbiting satellites to the table.

   INSERT INTO spacecrafts (id, name, launched, country, description, orbiting, operating,  miles) VALUES
   (1, "Genesis1", 07/12/2006, "Russia", "Genesis I suffered a major radiation event in December 2006 as a result of a solar storm", "Earth", FALSE, 1000000), 
   (2, "Maven", 11/18/2013, "USA", "MAVEN is a space probe developed by NASA to study the Martian atmosphere while orbiting Mars.", "Mars", TRUE, 106),
   (3, "GRAIL", 09/10/2011, "USA", "GRAIL was an American lunar science mission in NASA's Discovery Program which used high-quality gravitational field mapping of the Moon to determine its interior structure.", "Moon", FALSE, 53),

Remove one of the satellites from the table since it has just crashed into the planet.

   DELETE FROM spacecrafts WHERE id=3;

Edit another satellite because it is no longer operating and change the value to reflect that.

   UPDATE spacecrafts SET operating=FALSE WHERE id=2;

7. Write a command to create a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, 
the body of the email, the timestamp, whether or not you have read the email, and the id of the email chain it's in. Also provide commands that perform the 
following operations:

   CREATE TABLE emails(
      id integer, 
      subject text, 
      sender text,
      recipients text, 
      body text, 
      time timestamp, 
      read boolean, 
      chain integer
   );

Add three new emails to the inbox.
   INSERT INTO emails (id, subject, sender, recipients, body, time, read, chain) VALUES
   (1, "Buy Junk Food Cheap!", "junk@store.com", "none", "Get all the candy you want, half price!", 11/11/2018 04:05:04, FALSE, 1),
   (2, "Coffee on Tuesday", "friend@gmail.com", "friend2@gmail.com", "Lets chat over coffee Tuesday", 02/23/2019 08:45:09, TRUE, 50),
   (3, "Submission Approved", "graders@bloc.io", "none", "Submission for SQL Commands approved", 07/11/2018 20:05:26, FALSE, 1),

You deleted one of the emails, so write a command to remove the row from the inbox table.
   DELETE FROM emails WHERE id=1;

You started reading an email but just heard a crash in another room. Mark the email as unread before investigating the crash, so you can come back and read it later.
   UPDATE emails SET read=FALSE where id=2;