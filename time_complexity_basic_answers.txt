1.	What is time complexity and what is its relation to algorithms?

Time Complexity is expressed as a function that estimates the time it takes to execute a program. Algorithms
can describe how this variable will be handled, and make it clear what the Big O of that function. So, the
descriptions in an algorithm and how it impacts a variable will help determine its time complexity. 


2.	What is runtime?
The actual execution time duration of an algorithm; it is also synonymous with time complexity.

3.	How is the runtime of an algorithm calculated?
Since runtime is synonymous with time complexity, we can use the calculations for time complexity to determine
runttime. To determine the time complexity of an algorithm, you must add up how many instructions the algorithm
will execute as a function of the size of its input, and then simplify the expression to the largest term and 
drop any constants. Time complexity is affected by many operations, such as comparisons, loops, and function calls.

4.	Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to 
least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list

Constant Growth Rate          O(1)
Logarithmic Growth Rate       O(log n)
Linear Growth Rate            O(n)
Log-Linear Growth Rate        O(n log n)
Quadratic Growth Rate         O(n^2)
Exponential Growth Rate       O(2^n)
Factorial Growth Rate		O(n!)  <== Added


5.	Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Constant Growth Rate  - Determining if a binary number is even or odd

6.	Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array (A)
   IF number = target THEN (B)
     RETURN true (C)
   END IF
 END FOR
 RETURN false
END FUNCTION

Time Complexity = (A) + (B) + (C) = n + 1 + 1 = n +2 => O(n)

Linear Growth Rate            O(n)

7.	Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array (A)
   FOR each number in the array (B)
     print "Hello" (C)
   END FOR
 END FOR
END FUNCTION

Time Complexity = (A) * (B) + (C) = n * n + 1 = n^2 + 1 => O(n^2) 

Quadratic Growth Rate         O(n^2)



8.	Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence. 

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

Growth rate: 0(2^n) - exponential growth rate


9.	Out of the code snippets you just saw, which is the most time efficient?

The code in Question 6, which has a Linear Growth Rate. Because it grows proportional with the size of input.
